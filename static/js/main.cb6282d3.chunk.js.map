{"version":3,"sources":["components/card-component/card.jsx","components/cardlist-component/cardlist.jsx","components/searchbox-component/searchbox.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monsters","id","name","email","CardList","map","key","SearchBox","type","placeholder","onChange","onSearchChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredRobot","filter","monster","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qVAaeA,G,kBAVF,SAACC,GACV,OACI,yBAAKC,UAAU,kBACd,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,SAASC,GAAzC,4BACnB,4BAAKL,EAAMI,SAASE,MACpB,4BAAKN,EAAMI,SAASG,UCQjBC,EAXE,SAACR,GACd,OACI,yBAAKC,UAAW,YAEZD,EAAMI,SAASK,KAAI,SAAAL,GAAQ,OAC3B,kBAAC,EAAD,CAAMM,IAAKN,EAASC,GAAKD,SAAWA,SCIjCO,G,MAXG,SAACX,GACf,OACI,6BACI,+CACA,2BAAOC,UAAU,SAASW,KAAK,SAASC,YAAY,kBACpDC,SAAUd,EAAMe,oBC8BbC,E,YAhCb,aAAc,IAAD,8BACX,+CAOFD,eAAiB,SAACE,GAChB,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAPrC,EAAKC,MAAQ,CACZlB,SAAU,GACVe,YAAa,IAJH,E,iFAYO,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACd,SAAUuB,S,+BAG/B,IAAD,EAC4BC,KAAKN,MAA/BlB,EADF,EACEA,SAAUe,EADZ,EACYA,YACdU,EAAgBzB,EAAS0B,QAAO,SAAAC,GAAO,OACxCA,EAAQzB,KAAK0B,cAAcC,SAASd,EAAYa,kBAEpD,OACE,yBAAK/B,UAAU,OACb,kBAAC,EAAD,CAAWc,eAAgBa,KAAKb,iBAChC,kBAAC,EAAD,CAAUX,SAAUyB,S,GA3BVK,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,kB","file":"static/js/main.cb6282d3.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card-styles.css'\r\n\r\nconst Card = (props) => {\r\n    return (\r\n        <div className='card-container'>\r\n         <img alt=\"monster\" src={`https://robohash.org/${props.monsters.id}?set=set2&size=180x180`} />   \r\n            <h2>{props.monsters.name}</h2> \r\n            <h3>{props.monsters.email}</h3>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport './cardlist-styles.css';\r\nimport Card   from '../card-component/card.jsx';\r\n\r\n\r\nconst CardList = (props) => {\r\n    return (\r\n        <div className= 'cardlist'>\r\n          {\r\n            props.monsters.map(monsters => \r\n            <Card key={monsters.id}  monsters={ monsters }/>)}\r\n          \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\nimport './searchbox-styles.css';\r\n\r\nconst SearchBox = (props) => {\r\n    return (\r\n        <div>\r\n            <h1>Monster Rolodex</h1>\r\n            <input className='search' type='search' placeholder='search monsters'\r\n            onChange={props.onSearchChange}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport CardList from './components/cardlist-component/cardlist.jsx';\r\nimport SearchBox from './components/searchbox-component/searchbox';\r\n\r\nclass App extends Component {\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n     monsters: [] ,\r\n     searchField: ''\r\n    }\r\n  }\r\n\r\n  onSearchChange = (e) => {\r\n    this.setState({searchField: e.target.value }); \r\n  }\r\n\r\n componentDidMount() {\r\n   fetch('https://jsonplaceholder.typicode.com/users')\r\n   .then(response => response.json())\r\n   .then(users => this.setState({monsters: users}))\r\n }\r\n\r\n  render() {\r\n    const {  monsters, searchField } = this.state;\r\n   const filteredRobot = monsters.filter(monster => \r\n        monster.name.toLowerCase().includes(searchField.toLowerCase())\r\n    );\r\n    return (\r\n      <div className=\"App\">\r\n        <SearchBox onSearchChange={this.onSearchChange} />\r\n        <CardList monsters={filteredRobot}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}